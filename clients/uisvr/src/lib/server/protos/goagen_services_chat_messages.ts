// @generated by protobuf-ts 2.9.3
// @generated from protobuf file "goagen_services_chat_messages.proto" (package "chat_messages", syntax proto3)
// tslint:disable
//
// Code generated with goa v3.14.1, DO NOT EDIT.
//
// chat_messages protocol buffer definition
//
// Command:
// $ goa gen apisvr/design -o ./services
//
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message chat_messages.ListRequest
 */
export interface ListRequest {
    /**
     * X-ID-TOKEN
     *
     * @generated from protobuf field: string id_token = 1;
     */
    idToken: string;
    /**
     * Limit
     *
     * @generated from protobuf field: sint32 limit = 2;
     */
    limit: number;
    /**
     * Channel ID
     *
     * @generated from protobuf field: optional uint64 channel_id = 3;
     */
    channelId?: bigint;
    /**
     * ChatMessage ID for query to get messages after this
     *
     * @generated from protobuf field: optional uint64 after = 4;
     */
    after?: bigint;
    /**
     * ChatMessage ID for query to get messages before this
     *
     * @generated from protobuf field: optional uint64 before = 5;
     */
    before?: bigint;
}
/**
 * @generated from protobuf message chat_messages.ListResponse
 */
export interface ListResponse {
    /**
     * Items
     *
     * @generated from protobuf field: chat_messages.ChatMessageListItemCollection items = 2;
     */
    items?: ChatMessageListItemCollection;
}
/**
 * @generated from protobuf message chat_messages.ChatMessageListItemCollection
 */
export interface ChatMessageListItemCollection {
    /**
     * @generated from protobuf field: repeated chat_messages.ChatMessageListItem field = 1;
     */
    field: ChatMessageListItem[];
}
/**
 * @generated from protobuf message chat_messages.ChatMessageListItem
 */
export interface ChatMessageListItem {
    /**
     * ID
     *
     * @generated from protobuf field: uint64 id = 2;
     */
    id: bigint;
    /**
     * CreatedAt
     *
     * @generated from protobuf field: string created_at = 3;
     */
    createdAt: string;
    /**
     * UpdatedAt
     *
     * @generated from protobuf field: string updated_at = 4;
     */
    updatedAt: string;
    /**
     * Channel ID
     *
     * @generated from protobuf field: uint64 channel_id = 5;
     */
    channelId: bigint;
    /**
     * User ID
     *
     * @generated from protobuf field: optional uint64 user_id = 6;
     */
    userId?: bigint;
    /**
     * User Name
     *
     * @generated from protobuf field: string user_name = 7;
     */
    userName: string;
    /**
     * Content
     *
     * @generated from protobuf field: string content = 8;
     */
    content: string;
}
/**
 * @generated from protobuf message chat_messages.ShowRequest
 */
export interface ShowRequest {
    /**
     * X-ID-TOKEN
     *
     * @generated from protobuf field: string id_token = 1;
     */
    idToken: string;
    /**
     * ID
     *
     * @generated from protobuf field: uint64 id = 2;
     */
    id: bigint;
}
/**
 * @generated from protobuf message chat_messages.ShowResponse
 */
export interface ShowResponse {
    /**
     * ID
     *
     * @generated from protobuf field: uint64 id = 2;
     */
    id: bigint;
    /**
     * CreatedAt
     *
     * @generated from protobuf field: string created_at = 3;
     */
    createdAt: string;
    /**
     * UpdatedAt
     *
     * @generated from protobuf field: string updated_at = 4;
     */
    updatedAt: string;
    /**
     * Channel ID
     *
     * @generated from protobuf field: uint64 channel_id = 5;
     */
    channelId: bigint;
    /**
     * User ID
     *
     * @generated from protobuf field: optional uint64 user_id = 6;
     */
    userId?: bigint;
    /**
     * User Name
     *
     * @generated from protobuf field: string user_name = 7;
     */
    userName: string;
    /**
     * Content
     *
     * @generated from protobuf field: string content = 8;
     */
    content: string;
}
/**
 * @generated from protobuf message chat_messages.CreateRequest
 */
export interface CreateRequest {
    /**
     * X-ID-TOKEN
     *
     * @generated from protobuf field: string id_token = 1;
     */
    idToken: string;
    /**
     * Channel ID
     *
     * @generated from protobuf field: uint64 channel_id = 5;
     */
    channelId: bigint;
    /**
     * Content
     *
     * @generated from protobuf field: string content = 8;
     */
    content: string;
}
/**
 * @generated from protobuf message chat_messages.CreateResponse
 */
export interface CreateResponse {
    /**
     * ID
     *
     * @generated from protobuf field: uint64 id = 2;
     */
    id: bigint;
    /**
     * CreatedAt
     *
     * @generated from protobuf field: string created_at = 3;
     */
    createdAt: string;
    /**
     * UpdatedAt
     *
     * @generated from protobuf field: string updated_at = 4;
     */
    updatedAt: string;
    /**
     * Channel ID
     *
     * @generated from protobuf field: uint64 channel_id = 5;
     */
    channelId: bigint;
    /**
     * User ID
     *
     * @generated from protobuf field: optional uint64 user_id = 6;
     */
    userId?: bigint;
    /**
     * User Name
     *
     * @generated from protobuf field: string user_name = 7;
     */
    userName: string;
    /**
     * Content
     *
     * @generated from protobuf field: string content = 8;
     */
    content: string;
}
/**
 * @generated from protobuf message chat_messages.UpdateRequest
 */
export interface UpdateRequest {
    /**
     * X-ID-TOKEN
     *
     * @generated from protobuf field: string id_token = 1;
     */
    idToken: string;
    /**
     * ID
     *
     * @generated from protobuf field: uint64 id = 2;
     */
    id: bigint;
    /**
     * Content
     *
     * @generated from protobuf field: string content = 8;
     */
    content: string;
}
/**
 * @generated from protobuf message chat_messages.UpdateResponse
 */
export interface UpdateResponse {
    /**
     * ID
     *
     * @generated from protobuf field: uint64 id = 2;
     */
    id: bigint;
    /**
     * CreatedAt
     *
     * @generated from protobuf field: string created_at = 3;
     */
    createdAt: string;
    /**
     * UpdatedAt
     *
     * @generated from protobuf field: string updated_at = 4;
     */
    updatedAt: string;
    /**
     * Channel ID
     *
     * @generated from protobuf field: uint64 channel_id = 5;
     */
    channelId: bigint;
    /**
     * User ID
     *
     * @generated from protobuf field: optional uint64 user_id = 6;
     */
    userId?: bigint;
    /**
     * User Name
     *
     * @generated from protobuf field: string user_name = 7;
     */
    userName: string;
    /**
     * Content
     *
     * @generated from protobuf field: string content = 8;
     */
    content: string;
}
/**
 * @generated from protobuf message chat_messages.DeleteRequest
 */
export interface DeleteRequest {
    /**
     * X-ID-TOKEN
     *
     * @generated from protobuf field: string id_token = 1;
     */
    idToken: string;
    /**
     * ID
     *
     * @generated from protobuf field: uint64 id = 2;
     */
    id: bigint;
}
/**
 * @generated from protobuf message chat_messages.DeleteResponse
 */
export interface DeleteResponse {
    /**
     * ID
     *
     * @generated from protobuf field: uint64 id = 2;
     */
    id: bigint;
    /**
     * CreatedAt
     *
     * @generated from protobuf field: string created_at = 3;
     */
    createdAt: string;
    /**
     * UpdatedAt
     *
     * @generated from protobuf field: string updated_at = 4;
     */
    updatedAt: string;
    /**
     * Channel ID
     *
     * @generated from protobuf field: uint64 channel_id = 5;
     */
    channelId: bigint;
    /**
     * User ID
     *
     * @generated from protobuf field: optional uint64 user_id = 6;
     */
    userId?: bigint;
    /**
     * User Name
     *
     * @generated from protobuf field: string user_name = 7;
     */
    userName: string;
    /**
     * Content
     *
     * @generated from protobuf field: string content = 8;
     */
    content: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class ListRequest$Type extends MessageType<ListRequest> {
    constructor() {
        super("chat_messages.ListRequest", [
            { no: 1, name: "id_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "limit", kind: "scalar", T: 17 /*ScalarType.SINT32*/ },
            { no: 3, name: "channel_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "after", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "before", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ListRequest>): ListRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.idToken = "";
        message.limit = 0;
        if (value !== undefined)
            reflectionMergePartial<ListRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListRequest): ListRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id_token */ 1:
                    message.idToken = reader.string();
                    break;
                case /* sint32 limit */ 2:
                    message.limit = reader.sint32();
                    break;
                case /* optional uint64 channel_id */ 3:
                    message.channelId = reader.uint64().toBigInt();
                    break;
                case /* optional uint64 after */ 4:
                    message.after = reader.uint64().toBigInt();
                    break;
                case /* optional uint64 before */ 5:
                    message.before = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id_token = 1; */
        if (message.idToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.idToken);
        /* sint32 limit = 2; */
        if (message.limit !== 0)
            writer.tag(2, WireType.Varint).sint32(message.limit);
        /* optional uint64 channel_id = 3; */
        if (message.channelId !== undefined)
            writer.tag(3, WireType.Varint).uint64(message.channelId);
        /* optional uint64 after = 4; */
        if (message.after !== undefined)
            writer.tag(4, WireType.Varint).uint64(message.after);
        /* optional uint64 before = 5; */
        if (message.before !== undefined)
            writer.tag(5, WireType.Varint).uint64(message.before);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chat_messages.ListRequest
 */
export const ListRequest = new ListRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListResponse$Type extends MessageType<ListResponse> {
    constructor() {
        super("chat_messages.ListResponse", [
            { no: 2, name: "items", kind: "message", T: () => ChatMessageListItemCollection }
        ]);
    }
    create(value?: PartialMessage<ListResponse>): ListResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListResponse): ListResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* chat_messages.ChatMessageListItemCollection items */ 2:
                    message.items = ChatMessageListItemCollection.internalBinaryRead(reader, reader.uint32(), options, message.items);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* chat_messages.ChatMessageListItemCollection items = 2; */
        if (message.items)
            ChatMessageListItemCollection.internalBinaryWrite(message.items, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chat_messages.ListResponse
 */
export const ListResponse = new ListResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatMessageListItemCollection$Type extends MessageType<ChatMessageListItemCollection> {
    constructor() {
        super("chat_messages.ChatMessageListItemCollection", [
            { no: 1, name: "field", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ChatMessageListItem }
        ]);
    }
    create(value?: PartialMessage<ChatMessageListItemCollection>): ChatMessageListItemCollection {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.field = [];
        if (value !== undefined)
            reflectionMergePartial<ChatMessageListItemCollection>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatMessageListItemCollection): ChatMessageListItemCollection {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated chat_messages.ChatMessageListItem field */ 1:
                    message.field.push(ChatMessageListItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatMessageListItemCollection, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated chat_messages.ChatMessageListItem field = 1; */
        for (let i = 0; i < message.field.length; i++)
            ChatMessageListItem.internalBinaryWrite(message.field[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chat_messages.ChatMessageListItemCollection
 */
export const ChatMessageListItemCollection = new ChatMessageListItemCollection$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatMessageListItem$Type extends MessageType<ChatMessageListItem> {
    constructor() {
        super("chat_messages.ChatMessageListItem", [
            { no: 2, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "updated_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "user_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChatMessageListItem>): ChatMessageListItem {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.createdAt = "";
        message.updatedAt = "";
        message.channelId = 0n;
        message.userName = "";
        message.content = "";
        if (value !== undefined)
            reflectionMergePartial<ChatMessageListItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatMessageListItem): ChatMessageListItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 2:
                    message.id = reader.uint64().toBigInt();
                    break;
                case /* string created_at */ 3:
                    message.createdAt = reader.string();
                    break;
                case /* string updated_at */ 4:
                    message.updatedAt = reader.string();
                    break;
                case /* uint64 channel_id */ 5:
                    message.channelId = reader.uint64().toBigInt();
                    break;
                case /* optional uint64 user_id */ 6:
                    message.userId = reader.uint64().toBigInt();
                    break;
                case /* string user_name */ 7:
                    message.userName = reader.string();
                    break;
                case /* string content */ 8:
                    message.content = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatMessageListItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 2; */
        if (message.id !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.id);
        /* string created_at = 3; */
        if (message.createdAt !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.createdAt);
        /* string updated_at = 4; */
        if (message.updatedAt !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.updatedAt);
        /* uint64 channel_id = 5; */
        if (message.channelId !== 0n)
            writer.tag(5, WireType.Varint).uint64(message.channelId);
        /* optional uint64 user_id = 6; */
        if (message.userId !== undefined)
            writer.tag(6, WireType.Varint).uint64(message.userId);
        /* string user_name = 7; */
        if (message.userName !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.userName);
        /* string content = 8; */
        if (message.content !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chat_messages.ChatMessageListItem
 */
export const ChatMessageListItem = new ChatMessageListItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShowRequest$Type extends MessageType<ShowRequest> {
    constructor() {
        super("chat_messages.ShowRequest", [
            { no: 1, name: "id_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ShowRequest>): ShowRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.idToken = "";
        message.id = 0n;
        if (value !== undefined)
            reflectionMergePartial<ShowRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShowRequest): ShowRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id_token */ 1:
                    message.idToken = reader.string();
                    break;
                case /* uint64 id */ 2:
                    message.id = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ShowRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id_token = 1; */
        if (message.idToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.idToken);
        /* uint64 id = 2; */
        if (message.id !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chat_messages.ShowRequest
 */
export const ShowRequest = new ShowRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShowResponse$Type extends MessageType<ShowResponse> {
    constructor() {
        super("chat_messages.ShowResponse", [
            { no: 2, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "updated_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "user_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ShowResponse>): ShowResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.createdAt = "";
        message.updatedAt = "";
        message.channelId = 0n;
        message.userName = "";
        message.content = "";
        if (value !== undefined)
            reflectionMergePartial<ShowResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShowResponse): ShowResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 2:
                    message.id = reader.uint64().toBigInt();
                    break;
                case /* string created_at */ 3:
                    message.createdAt = reader.string();
                    break;
                case /* string updated_at */ 4:
                    message.updatedAt = reader.string();
                    break;
                case /* uint64 channel_id */ 5:
                    message.channelId = reader.uint64().toBigInt();
                    break;
                case /* optional uint64 user_id */ 6:
                    message.userId = reader.uint64().toBigInt();
                    break;
                case /* string user_name */ 7:
                    message.userName = reader.string();
                    break;
                case /* string content */ 8:
                    message.content = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ShowResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 2; */
        if (message.id !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.id);
        /* string created_at = 3; */
        if (message.createdAt !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.createdAt);
        /* string updated_at = 4; */
        if (message.updatedAt !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.updatedAt);
        /* uint64 channel_id = 5; */
        if (message.channelId !== 0n)
            writer.tag(5, WireType.Varint).uint64(message.channelId);
        /* optional uint64 user_id = 6; */
        if (message.userId !== undefined)
            writer.tag(6, WireType.Varint).uint64(message.userId);
        /* string user_name = 7; */
        if (message.userName !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.userName);
        /* string content = 8; */
        if (message.content !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chat_messages.ShowResponse
 */
export const ShowResponse = new ShowResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateRequest$Type extends MessageType<CreateRequest> {
    constructor() {
        super("chat_messages.CreateRequest", [
            { no: 1, name: "id_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateRequest>): CreateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.idToken = "";
        message.channelId = 0n;
        message.content = "";
        if (value !== undefined)
            reflectionMergePartial<CreateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateRequest): CreateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id_token */ 1:
                    message.idToken = reader.string();
                    break;
                case /* uint64 channel_id */ 5:
                    message.channelId = reader.uint64().toBigInt();
                    break;
                case /* string content */ 8:
                    message.content = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id_token = 1; */
        if (message.idToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.idToken);
        /* uint64 channel_id = 5; */
        if (message.channelId !== 0n)
            writer.tag(5, WireType.Varint).uint64(message.channelId);
        /* string content = 8; */
        if (message.content !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chat_messages.CreateRequest
 */
export const CreateRequest = new CreateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateResponse$Type extends MessageType<CreateResponse> {
    constructor() {
        super("chat_messages.CreateResponse", [
            { no: 2, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "updated_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "user_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateResponse>): CreateResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.createdAt = "";
        message.updatedAt = "";
        message.channelId = 0n;
        message.userName = "";
        message.content = "";
        if (value !== undefined)
            reflectionMergePartial<CreateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateResponse): CreateResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 2:
                    message.id = reader.uint64().toBigInt();
                    break;
                case /* string created_at */ 3:
                    message.createdAt = reader.string();
                    break;
                case /* string updated_at */ 4:
                    message.updatedAt = reader.string();
                    break;
                case /* uint64 channel_id */ 5:
                    message.channelId = reader.uint64().toBigInt();
                    break;
                case /* optional uint64 user_id */ 6:
                    message.userId = reader.uint64().toBigInt();
                    break;
                case /* string user_name */ 7:
                    message.userName = reader.string();
                    break;
                case /* string content */ 8:
                    message.content = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 2; */
        if (message.id !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.id);
        /* string created_at = 3; */
        if (message.createdAt !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.createdAt);
        /* string updated_at = 4; */
        if (message.updatedAt !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.updatedAt);
        /* uint64 channel_id = 5; */
        if (message.channelId !== 0n)
            writer.tag(5, WireType.Varint).uint64(message.channelId);
        /* optional uint64 user_id = 6; */
        if (message.userId !== undefined)
            writer.tag(6, WireType.Varint).uint64(message.userId);
        /* string user_name = 7; */
        if (message.userName !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.userName);
        /* string content = 8; */
        if (message.content !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chat_messages.CreateResponse
 */
export const CreateResponse = new CreateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateRequest$Type extends MessageType<UpdateRequest> {
    constructor() {
        super("chat_messages.UpdateRequest", [
            { no: 1, name: "id_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateRequest>): UpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.idToken = "";
        message.id = 0n;
        message.content = "";
        if (value !== undefined)
            reflectionMergePartial<UpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateRequest): UpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id_token */ 1:
                    message.idToken = reader.string();
                    break;
                case /* uint64 id */ 2:
                    message.id = reader.uint64().toBigInt();
                    break;
                case /* string content */ 8:
                    message.content = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id_token = 1; */
        if (message.idToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.idToken);
        /* uint64 id = 2; */
        if (message.id !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.id);
        /* string content = 8; */
        if (message.content !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chat_messages.UpdateRequest
 */
export const UpdateRequest = new UpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateResponse$Type extends MessageType<UpdateResponse> {
    constructor() {
        super("chat_messages.UpdateResponse", [
            { no: 2, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "updated_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "user_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateResponse>): UpdateResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.createdAt = "";
        message.updatedAt = "";
        message.channelId = 0n;
        message.userName = "";
        message.content = "";
        if (value !== undefined)
            reflectionMergePartial<UpdateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateResponse): UpdateResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 2:
                    message.id = reader.uint64().toBigInt();
                    break;
                case /* string created_at */ 3:
                    message.createdAt = reader.string();
                    break;
                case /* string updated_at */ 4:
                    message.updatedAt = reader.string();
                    break;
                case /* uint64 channel_id */ 5:
                    message.channelId = reader.uint64().toBigInt();
                    break;
                case /* optional uint64 user_id */ 6:
                    message.userId = reader.uint64().toBigInt();
                    break;
                case /* string user_name */ 7:
                    message.userName = reader.string();
                    break;
                case /* string content */ 8:
                    message.content = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 2; */
        if (message.id !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.id);
        /* string created_at = 3; */
        if (message.createdAt !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.createdAt);
        /* string updated_at = 4; */
        if (message.updatedAt !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.updatedAt);
        /* uint64 channel_id = 5; */
        if (message.channelId !== 0n)
            writer.tag(5, WireType.Varint).uint64(message.channelId);
        /* optional uint64 user_id = 6; */
        if (message.userId !== undefined)
            writer.tag(6, WireType.Varint).uint64(message.userId);
        /* string user_name = 7; */
        if (message.userName !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.userName);
        /* string content = 8; */
        if (message.content !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chat_messages.UpdateResponse
 */
export const UpdateResponse = new UpdateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteRequest$Type extends MessageType<DeleteRequest> {
    constructor() {
        super("chat_messages.DeleteRequest", [
            { no: 1, name: "id_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteRequest>): DeleteRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.idToken = "";
        message.id = 0n;
        if (value !== undefined)
            reflectionMergePartial<DeleteRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteRequest): DeleteRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id_token */ 1:
                    message.idToken = reader.string();
                    break;
                case /* uint64 id */ 2:
                    message.id = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id_token = 1; */
        if (message.idToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.idToken);
        /* uint64 id = 2; */
        if (message.id !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chat_messages.DeleteRequest
 */
export const DeleteRequest = new DeleteRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteResponse$Type extends MessageType<DeleteResponse> {
    constructor() {
        super("chat_messages.DeleteResponse", [
            { no: 2, name: "id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "updated_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "channel_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "user_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "user_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteResponse>): DeleteResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = 0n;
        message.createdAt = "";
        message.updatedAt = "";
        message.channelId = 0n;
        message.userName = "";
        message.content = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteResponse): DeleteResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 id */ 2:
                    message.id = reader.uint64().toBigInt();
                    break;
                case /* string created_at */ 3:
                    message.createdAt = reader.string();
                    break;
                case /* string updated_at */ 4:
                    message.updatedAt = reader.string();
                    break;
                case /* uint64 channel_id */ 5:
                    message.channelId = reader.uint64().toBigInt();
                    break;
                case /* optional uint64 user_id */ 6:
                    message.userId = reader.uint64().toBigInt();
                    break;
                case /* string user_name */ 7:
                    message.userName = reader.string();
                    break;
                case /* string content */ 8:
                    message.content = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 id = 2; */
        if (message.id !== 0n)
            writer.tag(2, WireType.Varint).uint64(message.id);
        /* string created_at = 3; */
        if (message.createdAt !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.createdAt);
        /* string updated_at = 4; */
        if (message.updatedAt !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.updatedAt);
        /* uint64 channel_id = 5; */
        if (message.channelId !== 0n)
            writer.tag(5, WireType.Varint).uint64(message.channelId);
        /* optional uint64 user_id = 6; */
        if (message.userId !== undefined)
            writer.tag(6, WireType.Varint).uint64(message.userId);
        /* string user_name = 7; */
        if (message.userName !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.userName);
        /* string content = 8; */
        if (message.content !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message chat_messages.DeleteResponse
 */
export const DeleteResponse = new DeleteResponse$Type();
/**
 * @generated ServiceType for protobuf service chat_messages.ChatMessages
 */
export const ChatMessages = new ServiceType("chat_messages.ChatMessages", [
    { name: "List", options: {}, I: ListRequest, O: ListResponse },
    { name: "Show", options: {}, I: ShowRequest, O: ShowResponse },
    { name: "Create", options: {}, I: CreateRequest, O: CreateResponse },
    { name: "Update", options: {}, I: UpdateRequest, O: UpdateResponse },
    { name: "Delete", options: {}, I: DeleteRequest, O: DeleteResponse }
]);
