// Code generated by goa v3.14.1, DO NOT EDIT.
//
// users HTTP client types
//
// Command:
// $ goa gen apisvr/design -o ./services

package client

import (
	users "apisvr/services/gen/users"
	usersviews "apisvr/services/gen/users/views"

	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "users" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	// Name
	Name string `form:"name" json:"name" xml:"name"`
	// Email
	Email string `form:"email" json:"email" xml:"email"`
}

// ListResponseBody is the type of the "users" service "list" endpoint HTTP
// response body.
type ListResponseBody struct {
	// Items
	Items UserListItemCollectionResponseBody `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	// Total number of items
	Total *uint64 `form:"total,omitempty" json:"total,omitempty" xml:"total,omitempty"`
	// Offset
	Offset *uint64 `form:"offset,omitempty" json:"offset,omitempty" xml:"offset,omitempty"`
}

// CreateResponseBody is the type of the "users" service "create" endpoint HTTP
// response body.
type CreateResponseBody struct {
	// ID
	ID *uint64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// CreatedAt
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// UpdatedAt
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
	// Name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// CreateInvalidPayloadResponseBody is the type of the "users" service "create"
// endpoint HTTP response body for the "invalid_payload" error.
type CreateInvalidPayloadResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UserListItemCollectionResponseBody is used to define fields on response body
// types.
type UserListItemCollectionResponseBody []*UserListItemResponseBody

// UserListItemResponseBody is used to define fields on response body types.
type UserListItemResponseBody struct {
	// ID
	ID *uint64 `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "users" service.
func NewCreateRequestBody(p *users.UserCreatePayload) *CreateRequestBody {
	body := &CreateRequestBody{
		Name:  p.Name,
		Email: p.Email,
	}
	return body
}

// NewListUserListOK builds a "users" service "list" endpoint result from a
// HTTP "OK" response.
func NewListUserListOK(body *ListResponseBody) *usersviews.UserListView {
	v := &usersviews.UserListView{
		Total:  body.Total,
		Offset: body.Offset,
	}
	v.Items = make([]*usersviews.UserListItemView, len(body.Items))
	for i, val := range body.Items {
		v.Items[i] = unmarshalUserListItemResponseBodyToUsersviewsUserListItemView(val)
	}

	return v
}

// NewCreateUserCreated builds a "users" service "create" endpoint result from
// a HTTP "Created" response.
func NewCreateUserCreated(body *CreateResponseBody) *usersviews.UserView {
	v := &usersviews.UserView{
		ID:        body.ID,
		CreatedAt: body.CreatedAt,
		UpdatedAt: body.UpdatedAt,
		Name:      body.Name,
	}

	return v
}

// NewCreateInvalidPayload builds a users service create endpoint
// invalid_payload error.
func NewCreateInvalidPayload(body *CreateInvalidPayloadResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateCreateInvalidPayloadResponseBody runs the validations defined on
// create_invalid_payload_response_body
func ValidateCreateInvalidPayloadResponseBody(body *CreateInvalidPayloadResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUserListItemCollectionResponseBody runs the validations defined on
// User-List-ItemCollectionResponseBody
func ValidateUserListItemCollectionResponseBody(body UserListItemCollectionResponseBody) (err error) {
	for _, e := range body {
		if e != nil {
			if err2 := ValidateUserListItemResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateUserListItemResponseBody runs the validations defined on
// User-List-ItemResponseBody
func ValidateUserListItemResponseBody(body *UserListItemResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}
