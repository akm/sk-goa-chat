// Code generated by goa v3.14.1, DO NOT EDIT.
//
// channels HTTP client encoders and decoders
//
// Command:
// $ goa gen apisvr/design -o ./services

package client

import (
	channels "apisvr/services/gen/channels"
	channelsviews "apisvr/services/gen/channels/views"
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildListRequest instantiates a HTTP request object with method and path set
// to call the "channels" service "list" endpoint
func (c *Client) BuildListRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListChannelsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("channels", "list", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListRequest returns an encoder for requests sent to the channels list
// server.
func EncodeListRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*channels.ListPayload)
		if !ok {
			return goahttp.ErrInvalidType("channels", "list", "*channels.ListPayload", v)
		}
		{
			head := p.UID
			req.Header.Set("X-UID", head)
		}
		return nil
	}
}

// DecodeListResponse returns a decoder for responses returned by the channels
// list endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeListResponse may return the following errors:
//   - "unauthenticated" (type *goa.ServiceError): http.StatusUnauthorized
//   - error: internal error
func DecodeListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("channels", "list", err)
			}
			p := NewListChannelListOK(&body)
			view := "default"
			vres := &channelsviews.ChannelList{Projected: p, View: view}
			if err = channelsviews.ValidateChannelList(vres); err != nil {
				return nil, goahttp.ErrValidationError("channels", "list", err)
			}
			res := channels.NewChannelList(vres)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body ListUnauthenticatedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("channels", "list", err)
			}
			err = ValidateListUnauthenticatedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("channels", "list", err)
			}
			return nil, NewListUnauthenticated(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("channels", "list", resp.StatusCode, string(body))
		}
	}
}

// BuildShowRequest instantiates a HTTP request object with method and path set
// to call the "channels" service "show" endpoint
func (c *Client) BuildShowRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id uint64
	)
	{
		p, ok := v.(*channels.ShowPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("channels", "show", "*channels.ShowPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ShowChannelsPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("channels", "show", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeShowRequest returns an encoder for requests sent to the channels show
// server.
func EncodeShowRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*channels.ShowPayload)
		if !ok {
			return goahttp.ErrInvalidType("channels", "show", "*channels.ShowPayload", v)
		}
		{
			head := p.UID
			req.Header.Set("X-UID", head)
		}
		return nil
	}
}

// DecodeShowResponse returns a decoder for responses returned by the channels
// show endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeShowResponse may return the following errors:
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "unauthenticated" (type *goa.ServiceError): http.StatusUnauthorized
//   - error: internal error
func DecodeShowResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ShowResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("channels", "show", err)
			}
			p := NewShowChannelOK(&body)
			view := "default"
			vres := &channelsviews.Channel{Projected: p, View: view}
			if err = channelsviews.ValidateChannel(vres); err != nil {
				return nil, goahttp.ErrValidationError("channels", "show", err)
			}
			res := channels.NewChannel(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body ShowNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("channels", "show", err)
			}
			err = ValidateShowNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("channels", "show", err)
			}
			return nil, NewShowNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body ShowUnauthenticatedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("channels", "show", err)
			}
			err = ValidateShowUnauthenticatedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("channels", "show", err)
			}
			return nil, NewShowUnauthenticated(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("channels", "show", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateRequest instantiates a HTTP request object with method and path
// set to call the "channels" service "create" endpoint
func (c *Client) BuildCreateRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateChannelsPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("channels", "create", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateRequest returns an encoder for requests sent to the channels
// create server.
func EncodeCreateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*channels.ChannelCreatePayload)
		if !ok {
			return goahttp.ErrInvalidType("channels", "create", "*channels.ChannelCreatePayload", v)
		}
		{
			head := p.UID
			req.Header.Set("X-UID", head)
		}
		body := NewCreateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("channels", "create", err)
		}
		return nil
	}
}

// DecodeCreateResponse returns a decoder for responses returned by the
// channels create endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeCreateResponse may return the following errors:
//   - "invalid_payload" (type *goa.ServiceError): http.StatusBadRequest
//   - "unauthenticated" (type *goa.ServiceError): http.StatusUnauthorized
//   - error: internal error
func DecodeCreateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("channels", "create", err)
			}
			p := NewCreateChannelCreated(&body)
			view := "default"
			vres := &channelsviews.Channel{Projected: p, View: view}
			if err = channelsviews.ValidateChannel(vres); err != nil {
				return nil, goahttp.ErrValidationError("channels", "create", err)
			}
			res := channels.NewChannel(vres)
			return res, nil
		case http.StatusBadRequest:
			var (
				body CreateInvalidPayloadResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("channels", "create", err)
			}
			err = ValidateCreateInvalidPayloadResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("channels", "create", err)
			}
			return nil, NewCreateInvalidPayload(&body)
		case http.StatusUnauthorized:
			var (
				body CreateUnauthenticatedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("channels", "create", err)
			}
			err = ValidateCreateUnauthenticatedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("channels", "create", err)
			}
			return nil, NewCreateUnauthenticated(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("channels", "create", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateRequest instantiates a HTTP request object with method and path
// set to call the "channels" service "update" endpoint
func (c *Client) BuildUpdateRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id uint64
	)
	{
		p, ok := v.(*channels.ChannelUpdatePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("channels", "update", "*channels.ChannelUpdatePayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateChannelsPath(id)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("channels", "update", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateRequest returns an encoder for requests sent to the channels
// update server.
func EncodeUpdateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*channels.ChannelUpdatePayload)
		if !ok {
			return goahttp.ErrInvalidType("channels", "update", "*channels.ChannelUpdatePayload", v)
		}
		{
			head := p.UID
			req.Header.Set("X-UID", head)
		}
		body := NewUpdateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("channels", "update", err)
		}
		return nil
	}
}

// DecodeUpdateResponse returns a decoder for responses returned by the
// channels update endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeUpdateResponse may return the following errors:
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "invalid_payload" (type *goa.ServiceError): http.StatusBadRequest
//   - "unauthenticated" (type *goa.ServiceError): http.StatusUnauthorized
//   - error: internal error
func DecodeUpdateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("channels", "update", err)
			}
			p := NewUpdateChannelOK(&body)
			view := "default"
			vres := &channelsviews.Channel{Projected: p, View: view}
			if err = channelsviews.ValidateChannel(vres); err != nil {
				return nil, goahttp.ErrValidationError("channels", "update", err)
			}
			res := channels.NewChannel(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body UpdateNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("channels", "update", err)
			}
			err = ValidateUpdateNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("channels", "update", err)
			}
			return nil, NewUpdateNotFound(&body)
		case http.StatusBadRequest:
			var (
				body UpdateInvalidPayloadResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("channels", "update", err)
			}
			err = ValidateUpdateInvalidPayloadResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("channels", "update", err)
			}
			return nil, NewUpdateInvalidPayload(&body)
		case http.StatusUnauthorized:
			var (
				body UpdateUnauthenticatedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("channels", "update", err)
			}
			err = ValidateUpdateUnauthenticatedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("channels", "update", err)
			}
			return nil, NewUpdateUnauthenticated(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("channels", "update", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteRequest instantiates a HTTP request object with method and path
// set to call the "channels" service "delete" endpoint
func (c *Client) BuildDeleteRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id uint64
	)
	{
		p, ok := v.(*channels.DeletePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("channels", "delete", "*channels.DeletePayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteChannelsPath(id)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("channels", "delete", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteRequest returns an encoder for requests sent to the channels
// delete server.
func EncodeDeleteRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*channels.DeletePayload)
		if !ok {
			return goahttp.ErrInvalidType("channels", "delete", "*channels.DeletePayload", v)
		}
		{
			head := p.UID
			req.Header.Set("X-UID", head)
		}
		return nil
	}
}

// DecodeDeleteResponse returns a decoder for responses returned by the
// channels delete endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeDeleteResponse may return the following errors:
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "unauthenticated" (type *goa.ServiceError): http.StatusUnauthorized
//   - error: internal error
func DecodeDeleteResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body DeleteResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("channels", "delete", err)
			}
			p := NewDeleteChannelOK(&body)
			view := "default"
			vres := &channelsviews.Channel{Projected: p, View: view}
			if err = channelsviews.ValidateChannel(vres); err != nil {
				return nil, goahttp.ErrValidationError("channels", "delete", err)
			}
			res := channels.NewChannel(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body DeleteNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("channels", "delete", err)
			}
			err = ValidateDeleteNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("channels", "delete", err)
			}
			return nil, NewDeleteNotFound(&body)
		case http.StatusUnauthorized:
			var (
				body DeleteUnauthenticatedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("channels", "delete", err)
			}
			err = ValidateDeleteUnauthenticatedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("channels", "delete", err)
			}
			return nil, NewDeleteUnauthenticated(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("channels", "delete", resp.StatusCode, string(body))
		}
	}
}

// unmarshalChannelListItemResponseBodyToChannelsviewsChannelListItemView
// builds a value of type *channelsviews.ChannelListItemView from a value of
// type *ChannelListItemResponseBody.
func unmarshalChannelListItemResponseBodyToChannelsviewsChannelListItemView(v *ChannelListItemResponseBody) *channelsviews.ChannelListItemView {
	res := &channelsviews.ChannelListItemView{
		ID:        v.ID,
		CreatedAt: v.CreatedAt,
		UpdatedAt: v.UpdatedAt,
		Name:      v.Name,
	}

	return res
}
