// Code generated by goa v3.14.1, DO NOT EDIT.
//
// chat_messages gRPC server types
//
// Command:
// $ goa gen apisvr/design -o ./services

package server

import (
	chatmessages "apisvr/services/gen/chat_messages"
	chatmessagesviews "apisvr/services/gen/chat_messages/views"
	chat_messagespb "apisvr/services/gen/grpc/chat_messages/pb"
)

// NewListPayload builds the payload of the "list" endpoint of the
// "chat_messages" service from the gRPC request type.
func NewListPayload(message *chat_messagespb.ListRequest) *chatmessages.ListPayload {
	v := &chatmessages.ListPayload{
		UID:       message.Uid,
		Limit:     int(message.Limit),
		ChannelID: message.ChannelId,
		After:     message.After,
		Before:    message.Before,
	}
	return v
}

// NewProtoListResponse builds the gRPC response type from the result of the
// "list" endpoint of the "chat_messages" service.
func NewProtoListResponse(result *chatmessagesviews.ChatMessageListView) *chat_messagespb.ListResponse {
	message := &chat_messagespb.ListResponse{}
	if result.Items != nil {
		message.Items = &chat_messagespb.ChatMessageListItemCollection{}
		message.Items.Field = make([]*chat_messagespb.ChatMessageListItem, len(result.Items))
		for i, val := range result.Items {
			message.Items.Field[i] = &chat_messagespb.ChatMessageListItem{
				Id:        *val.ID,
				CreatedAt: *val.CreatedAt,
				UpdatedAt: *val.UpdatedAt,
				ChannelId: *val.ChannelID,
				UserId:    val.UserID,
				UserName:  *val.UserName,
				Content:   *val.Content,
			}
		}
	}
	return message
}

// NewShowPayload builds the payload of the "show" endpoint of the
// "chat_messages" service from the gRPC request type.
func NewShowPayload(message *chat_messagespb.ShowRequest) *chatmessages.ShowPayload {
	v := &chatmessages.ShowPayload{
		UID: message.Uid,
		ID:  message.Id,
	}
	return v
}

// NewProtoShowResponse builds the gRPC response type from the result of the
// "show" endpoint of the "chat_messages" service.
func NewProtoShowResponse(result *chatmessagesviews.ChatMessageView) *chat_messagespb.ShowResponse {
	message := &chat_messagespb.ShowResponse{
		Id:        *result.ID,
		CreatedAt: *result.CreatedAt,
		UpdatedAt: *result.UpdatedAt,
		ChannelId: *result.ChannelID,
		UserId:    result.UserID,
		UserName:  *result.UserName,
		Content:   *result.Content,
	}
	return message
}

// NewCreatePayload builds the payload of the "create" endpoint of the
// "chat_messages" service from the gRPC request type.
func NewCreatePayload(message *chat_messagespb.CreateRequest) *chatmessages.ChatMessageCreatePayload {
	v := &chatmessages.ChatMessageCreatePayload{
		UID:       message.Uid,
		ChannelID: message.ChannelId,
		Content:   message.Content,
	}
	return v
}

// NewProtoCreateResponse builds the gRPC response type from the result of the
// "create" endpoint of the "chat_messages" service.
func NewProtoCreateResponse(result *chatmessagesviews.ChatMessageView) *chat_messagespb.CreateResponse {
	message := &chat_messagespb.CreateResponse{
		Id:        *result.ID,
		CreatedAt: *result.CreatedAt,
		UpdatedAt: *result.UpdatedAt,
		ChannelId: *result.ChannelID,
		UserId:    result.UserID,
		UserName:  *result.UserName,
		Content:   *result.Content,
	}
	return message
}

// NewUpdatePayload builds the payload of the "update" endpoint of the
// "chat_messages" service from the gRPC request type.
func NewUpdatePayload(message *chat_messagespb.UpdateRequest) *chatmessages.ChatMessageUpdatePayload {
	v := &chatmessages.ChatMessageUpdatePayload{
		UID:     message.Uid,
		ID:      message.Id,
		Content: message.Content,
	}
	return v
}

// NewProtoUpdateResponse builds the gRPC response type from the result of the
// "update" endpoint of the "chat_messages" service.
func NewProtoUpdateResponse(result *chatmessagesviews.ChatMessageView) *chat_messagespb.UpdateResponse {
	message := &chat_messagespb.UpdateResponse{
		Id:        *result.ID,
		CreatedAt: *result.CreatedAt,
		UpdatedAt: *result.UpdatedAt,
		ChannelId: *result.ChannelID,
		UserId:    result.UserID,
		UserName:  *result.UserName,
		Content:   *result.Content,
	}
	return message
}

// NewDeletePayload builds the payload of the "delete" endpoint of the
// "chat_messages" service from the gRPC request type.
func NewDeletePayload(message *chat_messagespb.DeleteRequest) *chatmessages.DeletePayload {
	v := &chatmessages.DeletePayload{
		UID: message.Uid,
		ID:  message.Id,
	}
	return v
}

// NewProtoDeleteResponse builds the gRPC response type from the result of the
// "delete" endpoint of the "chat_messages" service.
func NewProtoDeleteResponse(result *chatmessagesviews.ChatMessageView) *chat_messagespb.DeleteResponse {
	message := &chat_messagespb.DeleteResponse{
		Id:        *result.ID,
		CreatedAt: *result.CreatedAt,
		UpdatedAt: *result.UpdatedAt,
		ChannelId: *result.ChannelID,
		UserId:    result.UserID,
		UserName:  *result.UserName,
		Content:   *result.Content,
	}
	return message
}
