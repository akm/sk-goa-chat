// Code generated by goa v3.14.1, DO NOT EDIT.
//
// users service
//
// Command:
// $ goa gen apisvr/design -o ./services

package users

import (
	usersviews "apisvr/services/gen/users/views"
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Service is the users service interface.
type Service interface {
	// List implements list.
	List(context.Context) (res *UserList, err error)
	// Create implements create.
	Create(context.Context, *UserCreatePayload) (res *User, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "users"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [2]string{"list", "create"}

// User is the result type of the users service create method.
type User struct {
	// ID
	ID uint64
	// CreatedAt
	CreatedAt string
	// UpdatedAt
	UpdatedAt string
	// Name
	Name string
}

// UserCreatePayload is the payload type of the users service create method.
type UserCreatePayload struct {
	// Name
	Name string
	// Email
	Email string
}

// UserList is the result type of the users service list method.
type UserList struct {
	// Items
	Items UserListItemCollection
	// Total number of items
	Total uint64
	// Offset
	Offset uint64
}

type UserListItem struct {
	// ID
	ID uint64
	// Name
	Name string
}

type UserListItemCollection []*UserListItem

// MakeInvalidPayload builds a goa.ServiceError from an error.
func MakeInvalidPayload(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "invalid_payload", false, false, false)
}

// NewUserList initializes result type UserList from viewed result type
// UserList.
func NewUserList(vres *usersviews.UserList) *UserList {
	return newUserList(vres.Projected)
}

// NewViewedUserList initializes viewed result type UserList from result type
// UserList using the given view.
func NewViewedUserList(res *UserList, view string) *usersviews.UserList {
	p := newUserListView(res)
	return &usersviews.UserList{Projected: p, View: "default"}
}

// NewUser initializes result type User from viewed result type User.
func NewUser(vres *usersviews.User) *User {
	return newUser(vres.Projected)
}

// NewViewedUser initializes viewed result type User from result type User
// using the given view.
func NewViewedUser(res *User, view string) *usersviews.User {
	p := newUserView(res)
	return &usersviews.User{Projected: p, View: "default"}
}

// newUserList converts projected type UserList to service type UserList.
func newUserList(vres *usersviews.UserListView) *UserList {
	res := &UserList{}
	if vres.Total != nil {
		res.Total = *vres.Total
	}
	if vres.Offset != nil {
		res.Offset = *vres.Offset
	}
	if vres.Items != nil {
		res.Items = newUserListItemCollection(vres.Items)
	}
	return res
}

// newUserListView projects result type UserList to projected type UserListView
// using the "default" view.
func newUserListView(res *UserList) *usersviews.UserListView {
	vres := &usersviews.UserListView{
		Total:  &res.Total,
		Offset: &res.Offset,
	}
	if res.Items != nil {
		vres.Items = newUserListItemCollectionView(res.Items)
	}
	return vres
}

// newUserListItemCollection converts projected type UserListItemCollection to
// service type UserListItemCollection.
func newUserListItemCollection(vres usersviews.UserListItemCollectionView) UserListItemCollection {
	res := make(UserListItemCollection, len(vres))
	for i, n := range vres {
		res[i] = newUserListItem(n)
	}
	return res
}

// newUserListItemCollectionView projects result type UserListItemCollection to
// projected type UserListItemCollectionView using the "default" view.
func newUserListItemCollectionView(res UserListItemCollection) usersviews.UserListItemCollectionView {
	vres := make(usersviews.UserListItemCollectionView, len(res))
	for i, n := range res {
		vres[i] = newUserListItemView(n)
	}
	return vres
}

// newUserListItem converts projected type UserListItem to service type
// UserListItem.
func newUserListItem(vres *usersviews.UserListItemView) *UserListItem {
	res := &UserListItem{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	return res
}

// newUserListItemView projects result type UserListItem to projected type
// UserListItemView using the "default" view.
func newUserListItemView(res *UserListItem) *usersviews.UserListItemView {
	vres := &usersviews.UserListItemView{
		ID:   &res.ID,
		Name: &res.Name,
	}
	return vres
}

// newUser converts projected type User to service type User.
func newUser(vres *usersviews.UserView) *User {
	res := &User{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.CreatedAt != nil {
		res.CreatedAt = *vres.CreatedAt
	}
	if vres.UpdatedAt != nil {
		res.UpdatedAt = *vres.UpdatedAt
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	return res
}

// newUserView projects result type User to projected type UserView using the
// "default" view.
func newUserView(res *User) *usersviews.UserView {
	vres := &usersviews.UserView{
		ID:        &res.ID,
		CreatedAt: &res.CreatedAt,
		UpdatedAt: &res.UpdatedAt,
		Name:      &res.Name,
	}
	return vres
}
