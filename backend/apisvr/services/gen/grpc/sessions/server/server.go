// Code generated by goa v3.14.1, DO NOT EDIT.
//
// sessions gRPC server
//
// Command:
// $ goa gen apisvr/design -o ./services

package server

import (
	sessionspb "apisvr/services/gen/grpc/sessions/pb"
	sessions "apisvr/services/gen/sessions"
	"context"
	"errors"

	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc/codes"
)

// Server implements the sessionspb.SessionsServer interface.
type Server struct {
	CreateH goagrpc.UnaryHandler
	DeleteH goagrpc.UnaryHandler
	sessionspb.UnimplementedSessionsServer
}

// New instantiates the server struct with the sessions service endpoints.
func New(e *sessions.Endpoints, uh goagrpc.UnaryHandler) *Server {
	return &Server{
		CreateH: NewCreateHandler(e.Create, uh),
		DeleteH: NewDeleteHandler(e.Delete, uh),
	}
}

// NewCreateHandler creates a gRPC handler which serves the "sessions" service
// "create" endpoint.
func NewCreateHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeCreateRequest, EncodeCreateResponse)
	}
	return h
}

// Create implements the "Create" method in sessionspb.SessionsServer interface.
func (s *Server) Create(ctx context.Context, message *sessionspb.CreateRequest) (*sessionspb.CreateResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "create")
	ctx = context.WithValue(ctx, goa.ServiceKey, "sessions")
	resp, err := s.CreateH.Handle(ctx, message)
	if err != nil {
		var en goa.GoaErrorNamer
		if errors.As(err, &en) {
			switch en.GoaErrorName() {
			case "invalid_payload":
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*sessionspb.CreateResponse), nil
}

// NewDeleteHandler creates a gRPC handler which serves the "sessions" service
// "delete" endpoint.
func NewDeleteHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeDeleteRequest, EncodeDeleteResponse)
	}
	return h
}

// Delete implements the "Delete" method in sessionspb.SessionsServer interface.
func (s *Server) Delete(ctx context.Context, message *sessionspb.DeleteRequest) (*sessionspb.DeleteResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "delete")
	ctx = context.WithValue(ctx, goa.ServiceKey, "sessions")
	resp, err := s.DeleteH.Handle(ctx, message)
	if err != nil {
		var en goa.GoaErrorNamer
		if errors.As(err, &en) {
			switch en.GoaErrorName() {
			case "invalid_payload":
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*sessionspb.DeleteResponse), nil
}
