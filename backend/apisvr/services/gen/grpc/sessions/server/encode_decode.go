// Code generated by goa v3.14.1, DO NOT EDIT.
//
// sessions gRPC server encoders and decoders
//
// Command:
// $ goa gen apisvr/design -o ./services

package server

import (
	sessionspb "apisvr/services/gen/grpc/sessions/pb"
	sessions "apisvr/services/gen/sessions"
	"context"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodeCreateResponse encodes responses from the "sessions" service "create"
// endpoint.
func EncodeCreateResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	result, ok := v.(*sessions.CreateResult)
	if !ok {
		return nil, goagrpc.ErrInvalidType("sessions", "create", "*sessions.CreateResult", v)
	}
	resp := NewProtoCreateResponse(result)
	return resp, nil
}

// DecodeCreateRequest decodes requests sent to "sessions" service "create"
// endpoint.
func DecodeCreateRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *sessionspb.CreateRequest
		ok      bool
	)
	{
		if message, ok = v.(*sessionspb.CreateRequest); !ok {
			return nil, goagrpc.ErrInvalidType("sessions", "create", "*sessionspb.CreateRequest", v)
		}
	}
	var payload *sessions.CreatePayload
	{
		payload = NewCreatePayload(message)
	}
	return payload, nil
}

// EncodeDeleteResponse encodes responses from the "sessions" service "delete"
// endpoint.
func EncodeDeleteResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	result, ok := v.(*sessions.DeleteResult)
	if !ok {
		return nil, goagrpc.ErrInvalidType("sessions", "delete", "*sessions.DeleteResult", v)
	}
	resp := NewProtoDeleteResponse(result)
	return resp, nil
}

// DecodeDeleteRequest decodes requests sent to "sessions" service "delete"
// endpoint.
func DecodeDeleteRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *sessionspb.DeleteRequest
		ok      bool
	)
	{
		if message, ok = v.(*sessionspb.DeleteRequest); !ok {
			return nil, goagrpc.ErrInvalidType("sessions", "delete", "*sessionspb.DeleteRequest", v)
		}
	}
	var payload *sessions.DeletePayload
	{
		payload = NewDeletePayload(message)
	}
	return payload, nil
}
