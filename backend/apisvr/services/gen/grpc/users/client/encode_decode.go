// Code generated by goa v3.14.1, DO NOT EDIT.
//
// users gRPC client encoders and decoders
//
// Command:
// $ goa gen apisvr/design -o ./services

package client

import (
	userspb "apisvr/services/gen/grpc/users/pb"
	users "apisvr/services/gen/users"
	usersviews "apisvr/services/gen/users/views"
	"context"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildListFunc builds the remote method to invoke for "users" service "list"
// endpoint.
func BuildListFunc(grpccli userspb.UsersClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.List(ctx, reqpb.(*userspb.ListRequest), opts...)
		}
		return grpccli.List(ctx, &userspb.ListRequest{}, opts...)
	}
}

// DecodeListResponse decodes responses from the users list endpoint.
func DecodeListResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*userspb.ListResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("users", "list", "*userspb.ListResponse", v)
	}
	res := NewListResult(message)
	vres := &usersviews.UserList{Projected: res, View: view}
	if err := usersviews.ValidateUserList(vres); err != nil {
		return nil, err
	}
	return users.NewUserList(vres), nil
}

// BuildCreateFunc builds the remote method to invoke for "users" service
// "create" endpoint.
func BuildCreateFunc(grpccli userspb.UsersClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Create(ctx, reqpb.(*userspb.CreateRequest), opts...)
		}
		return grpccli.Create(ctx, &userspb.CreateRequest{}, opts...)
	}
}

// EncodeCreateRequest encodes requests sent to users create endpoint.
func EncodeCreateRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*users.UserCreatePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("users", "create", "*users.UserCreatePayload", v)
	}
	return NewProtoCreateRequest(payload), nil
}

// DecodeCreateResponse decodes responses from the users create endpoint.
func DecodeCreateResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	var view string
	{
		if vals := hdr.Get("goa-view"); len(vals) > 0 {
			view = vals[0]
		}
	}
	message, ok := v.(*userspb.CreateResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("users", "create", "*userspb.CreateResponse", v)
	}
	res := NewCreateResult(message)
	vres := &usersviews.User{Projected: res, View: view}
	if err := usersviews.ValidateUser(vres); err != nil {
		return nil, err
	}
	return users.NewUser(vres), nil
}
