// Code generated by goa v3.14.1, DO NOT EDIT.
//
// users gRPC server types
//
// Command:
// $ goa gen apisvr/design -o ./services

package server

import (
	userspb "apisvr/services/gen/grpc/users/pb"
	users "apisvr/services/gen/users"
	usersviews "apisvr/services/gen/users/views"
)

// NewProtoListResponse builds the gRPC response type from the result of the
// "list" endpoint of the "users" service.
func NewProtoListResponse(result *usersviews.UserListView) *userspb.ListResponse {
	message := &userspb.ListResponse{
		Total:  *result.Total,
		Offset: *result.Offset,
	}
	if result.Items != nil {
		message.Items = &userspb.UserListItemCollection{}
		message.Items.Field = make([]*userspb.UserListItem, len(result.Items))
		for i, val := range result.Items {
			message.Items.Field[i] = &userspb.UserListItem{
				Id:   *val.ID,
				Name: *val.Name,
			}
		}
	}
	return message
}

// NewCreatePayload builds the payload of the "create" endpoint of the "users"
// service from the gRPC request type.
func NewCreatePayload(message *userspb.CreateRequest) *users.UserCreatePayload {
	v := &users.UserCreatePayload{
		Name:  message.Name,
		Email: message.Email,
	}
	return v
}

// NewProtoCreateResponse builds the gRPC response type from the result of the
// "create" endpoint of the "users" service.
func NewProtoCreateResponse(result *usersviews.UserView) *userspb.CreateResponse {
	message := &userspb.CreateResponse{
		Id:        *result.ID,
		CreatedAt: *result.CreatedAt,
		UpdatedAt: *result.UpdatedAt,
		Name:      *result.Name,
	}
	return message
}
