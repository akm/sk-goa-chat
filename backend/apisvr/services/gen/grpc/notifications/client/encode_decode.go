// Code generated by goa v3.14.1, DO NOT EDIT.
//
// notifications gRPC client encoders and decoders
//
// Command:
// $ goa gen apisvr/design -o ./services

package client

import (
	notificationspb "apisvr/services/gen/grpc/notifications/pb"
	notifications "apisvr/services/gen/notifications"
	"context"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildSubscribeFunc builds the remote method to invoke for "notifications"
// service "subscribe" endpoint.
func BuildSubscribeFunc(grpccli notificationspb.NotificationsClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Subscribe(ctx, reqpb.(*notificationspb.SubscribeRequest), opts...)
		}
		return grpccli.Subscribe(ctx, &notificationspb.SubscribeRequest{}, opts...)
	}
}

// EncodeSubscribeRequest encodes requests sent to notifications subscribe
// endpoint.
func EncodeSubscribeRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*notifications.SubscribePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("notifications", "subscribe", "*notifications.SubscribePayload", v)
	}
	(*md).Append("authorization", payload.IDToken)
	return NewProtoSubscribeRequest(), nil
}

// DecodeSubscribeResponse decodes responses from the notifications subscribe
// endpoint.
func DecodeSubscribeResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	return &SubscribeClientStream{
		stream: v.(notificationspb.Notifications_SubscribeClient),
	}, nil
}
