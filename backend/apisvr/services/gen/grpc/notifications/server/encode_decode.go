// Code generated by goa v3.14.1, DO NOT EDIT.
//
// notifications gRPC server encoders and decoders
//
// Command:
// $ goa gen apisvr/design -o ./services

package server

import (
	notifications "apisvr/services/gen/notifications"
	"context"
	"strings"

	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc/metadata"
)

// EncodeSubscribeResponse encodes responses from the "notifications" service
// "subscribe" endpoint.
func EncodeSubscribeResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	result, ok := v.(*notifications.NotificationEvent)
	if !ok {
		return nil, goagrpc.ErrInvalidType("notifications", "subscribe", "*notifications.NotificationEvent", v)
	}
	resp := NewProtoSubscribeResponse(result)
	return resp, nil
}

// DecodeSubscribeRequest decodes requests sent to "notifications" service
// "subscribe" endpoint.
func DecodeSubscribeRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		idToken string
		err     error
	)
	{
		if vals := md.Get("authorization"); len(vals) == 0 {
			err = goa.MergeErrors(err, goa.MissingFieldError("authorization", "metadata"))
		} else {
			idToken = vals[0]
		}
	}
	if err != nil {
		return nil, err
	}
	var payload *notifications.SubscribePayload
	{
		payload = NewSubscribePayload(idToken)
		if strings.Contains(payload.IDToken, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.IDToken, " ", 2)[1]
			payload.IDToken = cred
		}
	}
	return payload, nil
}
