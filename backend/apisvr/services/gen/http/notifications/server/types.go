// Code generated by goa v3.14.1, DO NOT EDIT.
//
// notifications HTTP server types
//
// Command:
// $ goa gen apisvr/design -o ./services

package server

import (
	notifications "apisvr/services/gen/notifications"

	goa "goa.design/goa/v3/pkg"
)

// SubscribeResponseBody is the type of the "notifications" service "subscribe"
// endpoint HTTP response body.
type SubscribeResponseBody struct {
	// IDs of channels which got new messages
	ChannelIds []uint64 `form:"channel_ids" json:"channel_ids" xml:"channel_ids"`
}

// SubscribeUnauthenticatedResponseBody is the type of the "notifications"
// service "subscribe" endpoint HTTP response body for the "unauthenticated"
// error.
type SubscribeUnauthenticatedResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// NewSubscribeResponseBody builds the HTTP response body from the result of
// the "subscribe" endpoint of the "notifications" service.
func NewSubscribeResponseBody(res *notifications.NotificationEvent) *SubscribeResponseBody {
	body := &SubscribeResponseBody{}
	if res.ChannelIds != nil {
		body.ChannelIds = make([]uint64, len(res.ChannelIds))
		for i, val := range res.ChannelIds {
			body.ChannelIds[i] = val
		}
	} else {
		body.ChannelIds = []uint64{}
	}
	return body
}

// NewSubscribeUnauthenticatedResponseBody builds the HTTP response body from
// the result of the "subscribe" endpoint of the "notifications" service.
func NewSubscribeUnauthenticatedResponseBody(res *goa.ServiceError) *SubscribeUnauthenticatedResponseBody {
	body := &SubscribeUnauthenticatedResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewSubscribePayload builds a notifications service subscribe endpoint
// payload.
func NewSubscribePayload(sessionID string) *notifications.SubscribePayload {
	v := &notifications.SubscribePayload{}
	v.SessionID = sessionID

	return v
}
