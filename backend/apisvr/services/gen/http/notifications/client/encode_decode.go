// Code generated by goa v3.14.1, DO NOT EDIT.
//
// notifications HTTP client encoders and decoders
//
// Command:
// $ goa gen apisvr/design -o ./services

package client

import (
	notifications "apisvr/services/gen/notifications"
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildSubscribeRequest instantiates a HTTP request object with method and
// path set to call the "notifications" service "subscribe" endpoint
func (c *Client) BuildSubscribeRequest(ctx context.Context, v any) (*http.Request, error) {
	scheme := c.scheme
	switch c.scheme {
	case "http":
		scheme = "ws"
	case "https":
		scheme = "wss"
	}
	u := &url.URL{Scheme: scheme, Host: c.host, Path: SubscribeNotificationsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("notifications", "subscribe", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSubscribeRequest returns an encoder for requests sent to the
// notifications subscribe server.
func EncodeSubscribeRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*notifications.SubscribePayload)
		if !ok {
			return goahttp.ErrInvalidType("notifications", "subscribe", "*notifications.SubscribePayload", v)
		}
		{
			v := p.SessionID
			req.AddCookie(&http.Cookie{
				Name:  "session_id",
				Value: v,
			})
		}
		return nil
	}
}

// DecodeSubscribeResponse returns a decoder for responses returned by the
// notifications subscribe endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeSubscribeResponse may return the following errors:
//   - "unauthenticated" (type *goa.ServiceError): http.StatusUnauthorized
//   - error: internal error
func DecodeSubscribeResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body SubscribeResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("notifications", "subscribe", err)
			}
			err = ValidateSubscribeResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("notifications", "subscribe", err)
			}
			res := NewSubscribeNotificationEventOK(&body)
			return res, nil
		case http.StatusUnauthorized:
			var (
				body SubscribeUnauthenticatedResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("notifications", "subscribe", err)
			}
			err = ValidateSubscribeUnauthenticatedResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("notifications", "subscribe", err)
			}
			return nil, NewSubscribeUnauthenticated(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("notifications", "subscribe", resp.StatusCode, string(body))
		}
	}
}
