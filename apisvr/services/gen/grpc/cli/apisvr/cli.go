// Code generated by goa v3.14.1, DO NOT EDIT.
//
// apisvr gRPC client CLI support package
//
// Command:
// $ goa gen apisvr/design -o ./services

package cli

import (
	channelsc "apisvr/services/gen/grpc/channels/client"
	sessionsc "apisvr/services/gen/grpc/sessions/client"
	usersc "apisvr/services/gen/grpc/users/client"
	"flag"
	"fmt"
	"os"

	goa "goa.design/goa/v3/pkg"
	grpc "google.golang.org/grpc"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `channels (list|show|create|update|delete)
sessions (create|delete)
users (list|create)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` channels list --message '{
      "session_id": "Nesciunt architecto."
   }'` + "\n" +
		os.Args[0] + ` sessions create --message '{
      "id_token": "Pariatur laborum sequi necessitatibus cum voluptatum nihil."
   }'` + "\n" +
		os.Args[0] + ` users list` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(cc *grpc.ClientConn, opts ...grpc.CallOption) (goa.Endpoint, any, error) {
	var (
		channelsFlags = flag.NewFlagSet("channels", flag.ContinueOnError)

		channelsListFlags       = flag.NewFlagSet("list", flag.ExitOnError)
		channelsListMessageFlag = channelsListFlags.String("message", "", "")

		channelsShowFlags       = flag.NewFlagSet("show", flag.ExitOnError)
		channelsShowMessageFlag = channelsShowFlags.String("message", "", "")

		channelsCreateFlags       = flag.NewFlagSet("create", flag.ExitOnError)
		channelsCreateMessageFlag = channelsCreateFlags.String("message", "", "")

		channelsUpdateFlags       = flag.NewFlagSet("update", flag.ExitOnError)
		channelsUpdateMessageFlag = channelsUpdateFlags.String("message", "", "")

		channelsDeleteFlags       = flag.NewFlagSet("delete", flag.ExitOnError)
		channelsDeleteMessageFlag = channelsDeleteFlags.String("message", "", "")

		sessionsFlags = flag.NewFlagSet("sessions", flag.ContinueOnError)

		sessionsCreateFlags       = flag.NewFlagSet("create", flag.ExitOnError)
		sessionsCreateMessageFlag = sessionsCreateFlags.String("message", "", "")

		sessionsDeleteFlags       = flag.NewFlagSet("delete", flag.ExitOnError)
		sessionsDeleteMessageFlag = sessionsDeleteFlags.String("message", "", "")

		usersFlags = flag.NewFlagSet("users", flag.ContinueOnError)

		usersListFlags = flag.NewFlagSet("list", flag.ExitOnError)

		usersCreateFlags       = flag.NewFlagSet("create", flag.ExitOnError)
		usersCreateMessageFlag = usersCreateFlags.String("message", "", "")
	)
	channelsFlags.Usage = channelsUsage
	channelsListFlags.Usage = channelsListUsage
	channelsShowFlags.Usage = channelsShowUsage
	channelsCreateFlags.Usage = channelsCreateUsage
	channelsUpdateFlags.Usage = channelsUpdateUsage
	channelsDeleteFlags.Usage = channelsDeleteUsage

	sessionsFlags.Usage = sessionsUsage
	sessionsCreateFlags.Usage = sessionsCreateUsage
	sessionsDeleteFlags.Usage = sessionsDeleteUsage

	usersFlags.Usage = usersUsage
	usersListFlags.Usage = usersListUsage
	usersCreateFlags.Usage = usersCreateUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "channels":
			svcf = channelsFlags
		case "sessions":
			svcf = sessionsFlags
		case "users":
			svcf = usersFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "channels":
			switch epn {
			case "list":
				epf = channelsListFlags

			case "show":
				epf = channelsShowFlags

			case "create":
				epf = channelsCreateFlags

			case "update":
				epf = channelsUpdateFlags

			case "delete":
				epf = channelsDeleteFlags

			}

		case "sessions":
			switch epn {
			case "create":
				epf = sessionsCreateFlags

			case "delete":
				epf = sessionsDeleteFlags

			}

		case "users":
			switch epn {
			case "list":
				epf = usersListFlags

			case "create":
				epf = usersCreateFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "channels":
			c := channelsc.NewClient(cc, opts...)
			switch epn {
			case "list":
				endpoint = c.List()
				data, err = channelsc.BuildListPayload(*channelsListMessageFlag)
			case "show":
				endpoint = c.Show()
				data, err = channelsc.BuildShowPayload(*channelsShowMessageFlag)
			case "create":
				endpoint = c.Create()
				data, err = channelsc.BuildCreatePayload(*channelsCreateMessageFlag)
			case "update":
				endpoint = c.Update()
				data, err = channelsc.BuildUpdatePayload(*channelsUpdateMessageFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = channelsc.BuildDeletePayload(*channelsDeleteMessageFlag)
			}
		case "sessions":
			c := sessionsc.NewClient(cc, opts...)
			switch epn {
			case "create":
				endpoint = c.Create()
				data, err = sessionsc.BuildCreatePayload(*sessionsCreateMessageFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = sessionsc.BuildDeletePayload(*sessionsDeleteMessageFlag)
			}
		case "users":
			c := usersc.NewClient(cc, opts...)
			switch epn {
			case "list":
				endpoint = c.List()
				data = nil
			case "create":
				endpoint = c.Create()
				data, err = usersc.BuildCreatePayload(*usersCreateMessageFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// channelsUsage displays the usage of the channels command and its subcommands.
func channelsUsage() {
	fmt.Fprintf(os.Stderr, `Service is the channels service interface.
Usage:
    %[1]s [globalflags] channels COMMAND [flags]

COMMAND:
    list: List implements list.
    show: Show implements show.
    create: Create implements create.
    update: Update implements update.
    delete: Delete implements delete.

Additional help:
    %[1]s channels COMMAND --help
`, os.Args[0])
}
func channelsListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] channels list -message JSON

List implements list.
    -message JSON: 

Example:
    %[1]s channels list --message '{
      "session_id": "Nesciunt architecto."
   }'
`, os.Args[0])
}

func channelsShowUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] channels show -message JSON

Show implements show.
    -message JSON: 

Example:
    %[1]s channels show --message '{
      "id": 16310117872771126644,
      "session_id": "Voluptatum veritatis non."
   }'
`, os.Args[0])
}

func channelsCreateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] channels create -message JSON

Create implements create.
    -message JSON: 

Example:
    %[1]s channels create --message '{
      "name": "Similique non impedit omnis doloremque fuga pariatur.",
      "session_id": "Doloribus in."
   }'
`, os.Args[0])
}

func channelsUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] channels update -message JSON

Update implements update.
    -message JSON: 

Example:
    %[1]s channels update --message '{
      "id": 7865977164997637254,
      "name": "Quas voluptatibus consequatur nemo earum vero in.",
      "session_id": "Porro recusandae velit consequatur dolores eos."
   }'
`, os.Args[0])
}

func channelsDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] channels delete -message JSON

Delete implements delete.
    -message JSON: 

Example:
    %[1]s channels delete --message '{
      "id": 8606349444812321035,
      "session_id": "Illo nemo iusto eum quam in."
   }'
`, os.Args[0])
}

// sessionsUsage displays the usage of the sessions command and its subcommands.
func sessionsUsage() {
	fmt.Fprintf(os.Stderr, `Service is the sessions service interface.
Usage:
    %[1]s [globalflags] sessions COMMAND [flags]

COMMAND:
    create: Create implements create.
    delete: Delete implements delete.

Additional help:
    %[1]s sessions COMMAND --help
`, os.Args[0])
}
func sessionsCreateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] sessions create -message JSON

Create implements create.
    -message JSON: 

Example:
    %[1]s sessions create --message '{
      "id_token": "Pariatur laborum sequi necessitatibus cum voluptatum nihil."
   }'
`, os.Args[0])
}

func sessionsDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] sessions delete -message JSON

Delete implements delete.
    -message JSON: 

Example:
    %[1]s sessions delete --message '{
      "session_id": "Id labore temporibus sed."
   }'
`, os.Args[0])
}

// usersUsage displays the usage of the users command and its subcommands.
func usersUsage() {
	fmt.Fprintf(os.Stderr, `Service is the users service interface.
Usage:
    %[1]s [globalflags] users COMMAND [flags]

COMMAND:
    list: List implements list.
    create: Create implements create.

Additional help:
    %[1]s users COMMAND --help
`, os.Args[0])
}
func usersListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] users list

List implements list.

Example:
    %[1]s users list
`, os.Args[0])
}

func usersCreateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] users create -message JSON

Create implements create.
    -message JSON: 

Example:
    %[1]s users create --message '{
      "email": "Qui inventore.",
      "name": "Et quasi in animi."
   }'
`, os.Args[0])
}
