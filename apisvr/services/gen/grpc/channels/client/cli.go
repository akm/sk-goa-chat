// Code generated by goa v3.14.1, DO NOT EDIT.
//
// channels gRPC client CLI support package
//
// Command:
// $ goa gen apisvr/design -o ./services

package client

import (
	channels "apisvr/services/gen/channels"
	channelspb "apisvr/services/gen/grpc/channels/pb"
	"encoding/json"
	"fmt"
)

// BuildListPayload builds the payload for the channels list endpoint from CLI
// flags.
func BuildListPayload(channelsListSessionID string) (*channels.ListPayload, error) {
	var sessionID string
	{
		sessionID = channelsListSessionID
	}
	v := &channels.ListPayload{}
	v.SessionID = sessionID

	return v, nil
}

// BuildShowPayload builds the payload for the channels show endpoint from CLI
// flags.
func BuildShowPayload(channelsShowMessage string, channelsShowSessionID string) (*channels.ShowPayload, error) {
	var err error
	var message channelspb.ShowRequest
	{
		if channelsShowMessage != "" {
			err = json.Unmarshal([]byte(channelsShowMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": 16310117872771126644\n   }'")
			}
		}
	}
	var sessionID string
	{
		sessionID = channelsShowSessionID
	}
	v := &channels.ShowPayload{
		ID: message.Id,
	}
	v.SessionID = sessionID

	return v, nil
}

// BuildCreatePayload builds the payload for the channels create endpoint from
// CLI flags.
func BuildCreatePayload(channelsCreateMessage string, channelsCreateSessionID string) (*channels.ChannelCreatePayload, error) {
	var err error
	var message channelspb.CreateRequest
	{
		if channelsCreateMessage != "" {
			err = json.Unmarshal([]byte(channelsCreateMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"name\": \"Similique non impedit omnis doloremque fuga pariatur.\"\n   }'")
			}
		}
	}
	var sessionID string
	{
		sessionID = channelsCreateSessionID
	}
	v := &channels.ChannelCreatePayload{
		Name: message.Name,
	}
	v.SessionID = sessionID

	return v, nil
}

// BuildUpdatePayload builds the payload for the channels update endpoint from
// CLI flags.
func BuildUpdatePayload(channelsUpdateMessage string, channelsUpdateSessionID string) (*channels.ChannelUpdatePayload, error) {
	var err error
	var message channelspb.UpdateRequest
	{
		if channelsUpdateMessage != "" {
			err = json.Unmarshal([]byte(channelsUpdateMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": 7865977164997637254,\n      \"name\": \"Quas voluptatibus consequatur nemo earum vero in.\"\n   }'")
			}
		}
	}
	var sessionID string
	{
		sessionID = channelsUpdateSessionID
	}
	v := &channels.ChannelUpdatePayload{
		ID:   message.Id,
		Name: message.Name,
	}
	v.SessionID = sessionID

	return v, nil
}

// BuildDeletePayload builds the payload for the channels delete endpoint from
// CLI flags.
func BuildDeletePayload(channelsDeleteMessage string, channelsDeleteSessionID string) (*channels.DeletePayload, error) {
	var err error
	var message channelspb.DeleteRequest
	{
		if channelsDeleteMessage != "" {
			err = json.Unmarshal([]byte(channelsDeleteMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": 8606349444812321035\n   }'")
			}
		}
	}
	var sessionID string
	{
		sessionID = channelsDeleteSessionID
	}
	v := &channels.DeletePayload{
		ID: message.Id,
	}
	v.SessionID = sessionID

	return v, nil
}
