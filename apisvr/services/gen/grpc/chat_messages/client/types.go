// Code generated by goa v3.14.1, DO NOT EDIT.
//
// chat_messages gRPC client types
//
// Command:
// $ goa gen apisvr/design -o ./services

package client

import (
	chatmessages "apisvr/services/gen/chat_messages"
	chatmessagesviews "apisvr/services/gen/chat_messages/views"
	chat_messagespb "apisvr/services/gen/grpc/chat_messages/pb"

	goa "goa.design/goa/v3/pkg"
)

// NewProtoListRequest builds the gRPC request type from the payload of the
// "list" endpoint of the "chat_messages" service.
func NewProtoListRequest(payload *chatmessages.ListPayload) *chat_messagespb.ListRequest {
	message := &chat_messagespb.ListRequest{
		SessionId: payload.SessionID,
		Limit:     int32(payload.Limit),
		ChannelId: payload.ChannelID,
		After:     payload.After,
		Before:    payload.Before,
	}
	return message
}

// NewListResult builds the result type of the "list" endpoint of the
// "chat_messages" service from the gRPC response type.
func NewListResult(message *chat_messagespb.ListResponse) *chatmessagesviews.ChatMessageListView {
	result := &chatmessagesviews.ChatMessageListView{}
	if message.Items != nil {
		result.Items = make([]*chatmessagesviews.ChatMessageListItemView, len(message.Items.Field))
		for i, val := range message.Items.Field {
			result.Items[i] = &chatmessagesviews.ChatMessageListItemView{
				ID:        &val.Id,
				CreatedAt: &val.CreatedAt,
				UpdatedAt: &val.UpdatedAt,
				ChannelID: &val.ChannelId,
				UserID:    &val.UserId,
				UserName:  &val.UserName,
				Content:   &val.Content,
			}
		}
	}
	return result
}

// NewProtoShowRequest builds the gRPC request type from the payload of the
// "show" endpoint of the "chat_messages" service.
func NewProtoShowRequest(payload *chatmessages.ShowPayload) *chat_messagespb.ShowRequest {
	message := &chat_messagespb.ShowRequest{
		SessionId: payload.SessionID,
		Id:        payload.ID,
	}
	return message
}

// NewShowResult builds the result type of the "show" endpoint of the
// "chat_messages" service from the gRPC response type.
func NewShowResult(message *chat_messagespb.ShowResponse) *chatmessagesviews.ChatMessageView {
	result := &chatmessagesviews.ChatMessageView{
		ID:        &message.Id,
		CreatedAt: &message.CreatedAt,
		UpdatedAt: &message.UpdatedAt,
		ChannelID: &message.ChannelId,
		UserID:    &message.UserId,
		UserName:  &message.UserName,
		Content:   &message.Content,
	}
	return result
}

// NewProtoCreateRequest builds the gRPC request type from the payload of the
// "create" endpoint of the "chat_messages" service.
func NewProtoCreateRequest(payload *chatmessages.ChatMessageCreatePayload) *chat_messagespb.CreateRequest {
	message := &chat_messagespb.CreateRequest{
		SessionId: payload.SessionID,
		ChannelId: payload.ChannelID,
		Content:   payload.Content,
	}
	return message
}

// NewCreateResult builds the result type of the "create" endpoint of the
// "chat_messages" service from the gRPC response type.
func NewCreateResult(message *chat_messagespb.CreateResponse) *chatmessagesviews.ChatMessageView {
	result := &chatmessagesviews.ChatMessageView{
		ID:        &message.Id,
		CreatedAt: &message.CreatedAt,
		UpdatedAt: &message.UpdatedAt,
		ChannelID: &message.ChannelId,
		UserID:    &message.UserId,
		UserName:  &message.UserName,
		Content:   &message.Content,
	}
	return result
}

// NewProtoUpdateRequest builds the gRPC request type from the payload of the
// "update" endpoint of the "chat_messages" service.
func NewProtoUpdateRequest(payload *chatmessages.ChatMessageUpdatePayload) *chat_messagespb.UpdateRequest {
	message := &chat_messagespb.UpdateRequest{
		SessionId: payload.SessionID,
		Id:        payload.ID,
		Content:   payload.Content,
	}
	return message
}

// NewUpdateResult builds the result type of the "update" endpoint of the
// "chat_messages" service from the gRPC response type.
func NewUpdateResult(message *chat_messagespb.UpdateResponse) *chatmessagesviews.ChatMessageView {
	result := &chatmessagesviews.ChatMessageView{
		ID:        &message.Id,
		CreatedAt: &message.CreatedAt,
		UpdatedAt: &message.UpdatedAt,
		ChannelID: &message.ChannelId,
		UserID:    &message.UserId,
		UserName:  &message.UserName,
		Content:   &message.Content,
	}
	return result
}

// NewProtoDeleteRequest builds the gRPC request type from the payload of the
// "delete" endpoint of the "chat_messages" service.
func NewProtoDeleteRequest(payload *chatmessages.DeletePayload) *chat_messagespb.DeleteRequest {
	message := &chat_messagespb.DeleteRequest{
		SessionId: payload.SessionID,
		Id:        payload.ID,
	}
	return message
}

// NewDeleteResult builds the result type of the "delete" endpoint of the
// "chat_messages" service from the gRPC response type.
func NewDeleteResult(message *chat_messagespb.DeleteResponse) *chatmessagesviews.ChatMessageView {
	result := &chatmessagesviews.ChatMessageView{
		ID:        &message.Id,
		CreatedAt: &message.CreatedAt,
		UpdatedAt: &message.UpdatedAt,
		ChannelID: &message.ChannelId,
		UserID:    &message.UserId,
		UserName:  &message.UserName,
		Content:   &message.Content,
	}
	return result
}

// ValidateListResponse runs the validations defined on ListResponse.
func ValidateListResponse(message *chat_messagespb.ListResponse) (err error) {
	if message.Items == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("items", "message"))
	}
	if message.Items != nil {
		if err2 := ValidateChatMessageListItemCollection(message.Items); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateChatMessageListItemCollection runs the validations defined on
// ChatMessageListItemCollection.
func ValidateChatMessageListItemCollection(items *chat_messagespb.ChatMessageListItemCollection) (err error) {
	for _, e := range items.Field {
		if e != nil {
			if err2 := ValidateChatMessageListItem(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateChatMessageListItem runs the validations defined on
// ChatMessageListItem.
func ValidateChatMessageListItem(elem *chat_messagespb.ChatMessageListItem) (err error) {
	err = goa.MergeErrors(err, goa.ValidateFormat("elem.created_at", elem.CreatedAt, goa.FormatDateTime))
	err = goa.MergeErrors(err, goa.ValidateFormat("elem.updated_at", elem.UpdatedAt, goa.FormatDateTime))
	return
}

// ValidateShowResponse runs the validations defined on ShowResponse.
func ValidateShowResponse(message *chat_messagespb.ShowResponse) (err error) {
	err = goa.MergeErrors(err, goa.ValidateFormat("message.created_at", message.CreatedAt, goa.FormatDateTime))
	err = goa.MergeErrors(err, goa.ValidateFormat("message.updated_at", message.UpdatedAt, goa.FormatDateTime))
	return
}

// ValidateCreateResponse runs the validations defined on CreateResponse.
func ValidateCreateResponse(message *chat_messagespb.CreateResponse) (err error) {
	err = goa.MergeErrors(err, goa.ValidateFormat("message.created_at", message.CreatedAt, goa.FormatDateTime))
	err = goa.MergeErrors(err, goa.ValidateFormat("message.updated_at", message.UpdatedAt, goa.FormatDateTime))
	return
}

// ValidateUpdateResponse runs the validations defined on UpdateResponse.
func ValidateUpdateResponse(message *chat_messagespb.UpdateResponse) (err error) {
	err = goa.MergeErrors(err, goa.ValidateFormat("message.created_at", message.CreatedAt, goa.FormatDateTime))
	err = goa.MergeErrors(err, goa.ValidateFormat("message.updated_at", message.UpdatedAt, goa.FormatDateTime))
	return
}

// ValidateDeleteResponse runs the validations defined on DeleteResponse.
func ValidateDeleteResponse(message *chat_messagespb.DeleteResponse) (err error) {
	err = goa.MergeErrors(err, goa.ValidateFormat("message.created_at", message.CreatedAt, goa.FormatDateTime))
	err = goa.MergeErrors(err, goa.ValidateFormat("message.updated_at", message.UpdatedAt, goa.FormatDateTime))
	return
}
