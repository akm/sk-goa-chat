// Code generated by goa v3.14.1, DO NOT EDIT.
//
// notifications gRPC server encoders and decoders
//
// Command:
// $ goa gen apisvr/design -o ./services

package server

import (
	notificationspb "apisvr/services/gen/grpc/notifications/pb"
	notifications "apisvr/services/gen/notifications"
	"context"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodeSubscribeResponse encodes responses from the "notifications" service
// "subscribe" endpoint.
func EncodeSubscribeResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	result, ok := v.(*notifications.NotificationEvent)
	if !ok {
		return nil, goagrpc.ErrInvalidType("notifications", "subscribe", "*notifications.NotificationEvent", v)
	}
	resp := NewProtoSubscribeResponse(result)
	return resp, nil
}

// DecodeSubscribeRequest decodes requests sent to "notifications" service
// "subscribe" endpoint.
func DecodeSubscribeRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *notificationspb.SubscribeRequest
		ok      bool
	)
	{
		if message, ok = v.(*notificationspb.SubscribeRequest); !ok {
			return nil, goagrpc.ErrInvalidType("notifications", "subscribe", "*notificationspb.SubscribeRequest", v)
		}
	}
	var payload *notifications.SubscribePayload
	{
		payload = NewSubscribePayload(message)
	}
	return payload, nil
}
