// Code generated by goa v3.14.1, DO NOT EDIT.
//
// notifications gRPC server types
//
// Command:
// $ goa gen apisvr/design -o ./services

package server

import (
	notificationspb "apisvr/services/gen/grpc/notifications/pb"
	notifications "apisvr/services/gen/notifications"
)

// NewSubscribePayload builds the payload of the "subscribe" endpoint of the
// "notifications" service from the gRPC request type.
func NewSubscribePayload(message *notificationspb.SubscribeRequest) *notifications.SubscribePayload {
	v := &notifications.SubscribePayload{
		SessionID: message.SessionId,
	}
	return v
}

// NewProtoSubscribeResponse builds the gRPC response type from the result of
// the "subscribe" endpoint of the "notifications" service.
func NewProtoSubscribeResponse(result *notifications.NotificationEvent) *notificationspb.SubscribeResponse {
	message := &notificationspb.SubscribeResponse{}
	if result.ChannelIds != nil {
		message.ChannelIds = make([]uint64, len(result.ChannelIds))
		for i, val := range result.ChannelIds {
			message.ChannelIds[i] = val
		}
	}
	return message
}

func NewProtoNotificationEventSubscribeResponse(result *notifications.NotificationEvent) *notificationspb.SubscribeResponse {
	v := &notificationspb.SubscribeResponse{}
	if result.ChannelIds != nil {
		v.ChannelIds = make([]uint64, len(result.ChannelIds))
		for i, val := range result.ChannelIds {
			v.ChannelIds[i] = val
		}
	}
	return v
}
