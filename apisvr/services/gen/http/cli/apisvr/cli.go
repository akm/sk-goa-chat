// Code generated by goa v3.14.0, DO NOT EDIT.
//
// apisvr HTTP client CLI support package
//
// Command:
// $ goa gen apisvr/design -o ./services

package cli

import (
	channelsc "apisvr/services/gen/http/channels/client"
	"flag"
	"fmt"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `channels (list|show|create|update|delete)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` channels list` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		channelsFlags = flag.NewFlagSet("channels", flag.ContinueOnError)

		channelsListFlags = flag.NewFlagSet("list", flag.ExitOnError)

		channelsShowFlags  = flag.NewFlagSet("show", flag.ExitOnError)
		channelsShowIDFlag = channelsShowFlags.String("id", "REQUIRED", "ID")

		channelsCreateFlags    = flag.NewFlagSet("create", flag.ExitOnError)
		channelsCreateBodyFlag = channelsCreateFlags.String("body", "REQUIRED", "")

		channelsUpdateFlags    = flag.NewFlagSet("update", flag.ExitOnError)
		channelsUpdateBodyFlag = channelsUpdateFlags.String("body", "REQUIRED", "")
		channelsUpdateIDFlag   = channelsUpdateFlags.String("id", "REQUIRED", "ID")

		channelsDeleteFlags  = flag.NewFlagSet("delete", flag.ExitOnError)
		channelsDeleteIDFlag = channelsDeleteFlags.String("id", "REQUIRED", "ID")
	)
	channelsFlags.Usage = channelsUsage
	channelsListFlags.Usage = channelsListUsage
	channelsShowFlags.Usage = channelsShowUsage
	channelsCreateFlags.Usage = channelsCreateUsage
	channelsUpdateFlags.Usage = channelsUpdateUsage
	channelsDeleteFlags.Usage = channelsDeleteUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "channels":
			svcf = channelsFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "channels":
			switch epn {
			case "list":
				epf = channelsListFlags

			case "show":
				epf = channelsShowFlags

			case "create":
				epf = channelsCreateFlags

			case "update":
				epf = channelsUpdateFlags

			case "delete":
				epf = channelsDeleteFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "channels":
			c := channelsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list":
				endpoint = c.List()
				data = nil
			case "show":
				endpoint = c.Show()
				data, err = channelsc.BuildShowPayload(*channelsShowIDFlag)
			case "create":
				endpoint = c.Create()
				data, err = channelsc.BuildCreatePayload(*channelsCreateBodyFlag)
			case "update":
				endpoint = c.Update()
				data, err = channelsc.BuildUpdatePayload(*channelsUpdateBodyFlag, *channelsUpdateIDFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = channelsc.BuildDeletePayload(*channelsDeleteIDFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// channelsUsage displays the usage of the channels command and its subcommands.
func channelsUsage() {
	fmt.Fprintf(os.Stderr, `Service is the channels service interface.
Usage:
    %[1]s [globalflags] channels COMMAND [flags]

COMMAND:
    list: List implements list.
    show: Show implements show.
    create: Create implements create.
    update: Update implements update.
    delete: Delete implements delete.

Additional help:
    %[1]s channels COMMAND --help
`, os.Args[0])
}
func channelsListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] channels list

List implements list.

Example:
    %[1]s channels list
`, os.Args[0])
}

func channelsShowUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] channels show -id UINT64

Show implements show.
    -id UINT64: ID

Example:
    %[1]s channels show --id 13959009638458441834
`, os.Args[0])
}

func channelsCreateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] channels create -body JSON

Create implements create.
    -body JSON: 

Example:
    %[1]s channels create --body '{
      "name": "Enim iste odio."
   }'
`, os.Args[0])
}

func channelsUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] channels update -body JSON -id UINT64

Update implements update.
    -body JSON: 
    -id UINT64: ID

Example:
    %[1]s channels update --body '{
      "name": "Consequatur officia dolores corporis."
   }' --id 5039307373017843324
`, os.Args[0])
}

func channelsDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] channels delete -id UINT64

Delete implements delete.
    -id UINT64: ID

Example:
    %[1]s channels delete --id 8275257875255490841
`, os.Args[0])
}
