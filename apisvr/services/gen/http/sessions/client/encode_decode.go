// Code generated by goa v3.14.1, DO NOT EDIT.
//
// sessions HTTP client encoders and decoders
//
// Command:
// $ goa gen apisvr/design -o ./services

package client

import (
	sessions "apisvr/services/gen/sessions"
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// BuildCreateRequest instantiates a HTTP request object with method and path
// set to call the "sessions" service "create" endpoint
func (c *Client) BuildCreateRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateSessionsPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("sessions", "create", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateRequest returns an encoder for requests sent to the sessions
// create server.
func EncodeCreateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*sessions.CreatePayload)
		if !ok {
			return goahttp.ErrInvalidType("sessions", "create", "*sessions.CreatePayload", v)
		}
		body := NewCreateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("sessions", "create", err)
		}
		return nil
	}
}

// DecodeCreateResponse returns a decoder for responses returned by the
// sessions create endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeCreateResponse may return the following errors:
//   - "invalid_payload" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeCreateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				sessionID    string
				sessionIDRaw string

				cookies = resp.Cookies()
				err     error
			)
			for _, c := range cookies {
				switch c.Name {
				case "session_id":
					sessionIDRaw = c.Value
				}
			}
			if sessionIDRaw == "" {
				err = goa.MergeErrors(err, goa.MissingFieldError("session_id", "cookie"))
			}
			sessionID = sessionIDRaw
			if err != nil {
				return nil, goahttp.ErrValidationError("sessions", "create", err)
			}
			res := NewCreateResultCreated(sessionID)
			return res, nil
		case http.StatusBadRequest:
			var (
				body CreateInvalidPayloadResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sessions", "create", err)
			}
			err = ValidateCreateInvalidPayloadResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sessions", "create", err)
			}
			return nil, NewCreateInvalidPayload(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("sessions", "create", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteRequest instantiates a HTTP request object with method and path
// set to call the "sessions" service "delete" endpoint
func (c *Client) BuildDeleteRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteSessionsPath()}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("sessions", "delete", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteRequest returns an encoder for requests sent to the sessions
// delete server.
func EncodeDeleteRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*sessions.DeletePayload)
		if !ok {
			return goahttp.ErrInvalidType("sessions", "delete", "*sessions.DeletePayload", v)
		}
		{
			v := p.SessionID
			req.AddCookie(&http.Cookie{
				Name:  "session_id",
				Value: v,
			})
		}
		return nil
	}
}

// DecodeDeleteResponse returns a decoder for responses returned by the
// sessions delete endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeDeleteResponse may return the following errors:
//   - "invalid_payload" (type *goa.ServiceError): http.StatusBadRequest
//   - error: internal error
func DecodeDeleteResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		case http.StatusBadRequest:
			var (
				body DeleteInvalidPayloadResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sessions", "delete", err)
			}
			err = ValidateDeleteInvalidPayloadResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("sessions", "delete", err)
			}
			return nil, NewDeleteInvalidPayload(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("sessions", "delete", resp.StatusCode, string(body))
		}
	}
}
