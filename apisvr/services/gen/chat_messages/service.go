// Code generated by goa v3.14.1, DO NOT EDIT.
//
// chat_messages service
//
// Command:
// $ goa gen apisvr/design -o ./services

package chatmessages

import (
	chatmessagesviews "apisvr/services/gen/chat_messages/views"
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Service is the chat_messages service interface.
type Service interface {
	// List implements list.
	List(context.Context, *ListPayload) (res *ChatMessageList, err error)
	// Show implements show.
	Show(context.Context, *ShowPayload) (res *ChatMessage, err error)
	// Create implements create.
	Create(context.Context, *ChatMessageCreatePayload) (res *ChatMessage, err error)
	// Update implements update.
	Update(context.Context, *ChatMessageUpdatePayload) (res *ChatMessage, err error)
	// Delete implements delete.
	Delete(context.Context, *DeletePayload) (res *ChatMessage, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "chat_messages"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [5]string{"list", "show", "create", "update", "delete"}

// ChatMessage is the result type of the chat_messages service show method.
type ChatMessage struct {
	// ID
	ID uint64
	// CreatedAt
	CreatedAt string
	// UpdatedAt
	UpdatedAt string
	// Channel ID
	ChannelID uint64
	// User ID
	UserID *uint64
	// User Name
	UserName uint64
	// Content
	Content string
}

// ChatMessageCreatePayload is the payload type of the chat_messages service
// create method.
type ChatMessageCreatePayload struct {
	// Session ID
	SessionID string
	// Channel ID
	ChannelID uint64
	// Content
	Content string
}

// ChatMessageList is the result type of the chat_messages service list method.
type ChatMessageList struct {
	// Items
	Items ChatMessageListItemCollection
}

type ChatMessageListItem struct {
	// ID
	ID uint64
	// CreatedAt
	CreatedAt string
	// UpdatedAt
	UpdatedAt string
	// Channel ID
	ChannelID uint64
	// User ID
	UserID *uint64
	// User Name
	UserName uint64
	// Content
	Content string
}

type ChatMessageListItemCollection []*ChatMessageListItem

// ChatMessageUpdatePayload is the payload type of the chat_messages service
// update method.
type ChatMessageUpdatePayload struct {
	// Session ID
	SessionID string
	// ID
	ID uint64
	// Content
	Content string
}

// DeletePayload is the payload type of the chat_messages service delete method.
type DeletePayload struct {
	// Session ID
	SessionID string
	// ID
	ID uint64
}

// ListPayload is the payload type of the chat_messages service list method.
type ListPayload struct {
	// Session ID
	SessionID string
	// Limit
	Limit int
	// Channel ID
	ChannelID *uint64
	// ChatMessage ID for query to get messages after this
	After *uint64
	// ChatMessage ID for query to get messages before this
	Before *uint64
}

// ShowPayload is the payload type of the chat_messages service show method.
type ShowPayload struct {
	// Session ID
	SessionID string
	// ID
	ID uint64
}

// MakeUnauthenticated builds a goa.ServiceError from an error.
func MakeUnauthenticated(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "unauthenticated", false, false, false)
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "not_found", false, false, false)
}

// MakeInvalidPayload builds a goa.ServiceError from an error.
func MakeInvalidPayload(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "invalid_payload", false, false, false)
}

// NewChatMessageList initializes result type ChatMessageList from viewed
// result type ChatMessageList.
func NewChatMessageList(vres *chatmessagesviews.ChatMessageList) *ChatMessageList {
	return newChatMessageList(vres.Projected)
}

// NewViewedChatMessageList initializes viewed result type ChatMessageList from
// result type ChatMessageList using the given view.
func NewViewedChatMessageList(res *ChatMessageList, view string) *chatmessagesviews.ChatMessageList {
	p := newChatMessageListView(res)
	return &chatmessagesviews.ChatMessageList{Projected: p, View: "default"}
}

// NewChatMessage initializes result type ChatMessage from viewed result type
// ChatMessage.
func NewChatMessage(vres *chatmessagesviews.ChatMessage) *ChatMessage {
	return newChatMessage(vres.Projected)
}

// NewViewedChatMessage initializes viewed result type ChatMessage from result
// type ChatMessage using the given view.
func NewViewedChatMessage(res *ChatMessage, view string) *chatmessagesviews.ChatMessage {
	p := newChatMessageView(res)
	return &chatmessagesviews.ChatMessage{Projected: p, View: "default"}
}

// newChatMessageList converts projected type ChatMessageList to service type
// ChatMessageList.
func newChatMessageList(vres *chatmessagesviews.ChatMessageListView) *ChatMessageList {
	res := &ChatMessageList{}
	if vres.Items != nil {
		res.Items = newChatMessageListItemCollection(vres.Items)
	}
	return res
}

// newChatMessageListView projects result type ChatMessageList to projected
// type ChatMessageListView using the "default" view.
func newChatMessageListView(res *ChatMessageList) *chatmessagesviews.ChatMessageListView {
	vres := &chatmessagesviews.ChatMessageListView{}
	if res.Items != nil {
		vres.Items = newChatMessageListItemCollectionView(res.Items)
	}
	return vres
}

// newChatMessageListItemCollection converts projected type
// ChatMessageListItemCollection to service type ChatMessageListItemCollection.
func newChatMessageListItemCollection(vres chatmessagesviews.ChatMessageListItemCollectionView) ChatMessageListItemCollection {
	res := make(ChatMessageListItemCollection, len(vres))
	for i, n := range vres {
		res[i] = newChatMessageListItem(n)
	}
	return res
}

// newChatMessageListItemCollectionView projects result type
// ChatMessageListItemCollection to projected type
// ChatMessageListItemCollectionView using the "default" view.
func newChatMessageListItemCollectionView(res ChatMessageListItemCollection) chatmessagesviews.ChatMessageListItemCollectionView {
	vres := make(chatmessagesviews.ChatMessageListItemCollectionView, len(res))
	for i, n := range res {
		vres[i] = newChatMessageListItemView(n)
	}
	return vres
}

// newChatMessageListItem converts projected type ChatMessageListItem to
// service type ChatMessageListItem.
func newChatMessageListItem(vres *chatmessagesviews.ChatMessageListItemView) *ChatMessageListItem {
	res := &ChatMessageListItem{
		UserID: vres.UserID,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.CreatedAt != nil {
		res.CreatedAt = *vres.CreatedAt
	}
	if vres.UpdatedAt != nil {
		res.UpdatedAt = *vres.UpdatedAt
	}
	if vres.ChannelID != nil {
		res.ChannelID = *vres.ChannelID
	}
	if vres.UserName != nil {
		res.UserName = *vres.UserName
	}
	if vres.Content != nil {
		res.Content = *vres.Content
	}
	return res
}

// newChatMessageListItemView projects result type ChatMessageListItem to
// projected type ChatMessageListItemView using the "default" view.
func newChatMessageListItemView(res *ChatMessageListItem) *chatmessagesviews.ChatMessageListItemView {
	vres := &chatmessagesviews.ChatMessageListItemView{
		ID:        &res.ID,
		CreatedAt: &res.CreatedAt,
		UpdatedAt: &res.UpdatedAt,
		ChannelID: &res.ChannelID,
		UserID:    res.UserID,
		UserName:  &res.UserName,
		Content:   &res.Content,
	}
	return vres
}

// newChatMessage converts projected type ChatMessage to service type
// ChatMessage.
func newChatMessage(vres *chatmessagesviews.ChatMessageView) *ChatMessage {
	res := &ChatMessage{
		UserID: vres.UserID,
	}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.CreatedAt != nil {
		res.CreatedAt = *vres.CreatedAt
	}
	if vres.UpdatedAt != nil {
		res.UpdatedAt = *vres.UpdatedAt
	}
	if vres.ChannelID != nil {
		res.ChannelID = *vres.ChannelID
	}
	if vres.UserName != nil {
		res.UserName = *vres.UserName
	}
	if vres.Content != nil {
		res.Content = *vres.Content
	}
	return res
}

// newChatMessageView projects result type ChatMessage to projected type
// ChatMessageView using the "default" view.
func newChatMessageView(res *ChatMessage) *chatmessagesviews.ChatMessageView {
	vres := &chatmessagesviews.ChatMessageView{
		ID:        &res.ID,
		CreatedAt: &res.CreatedAt,
		UpdatedAt: &res.UpdatedAt,
		ChannelID: &res.ChannelID,
		UserID:    res.UserID,
		UserName:  &res.UserName,
		Content:   &res.Content,
	}
	return vres
}
