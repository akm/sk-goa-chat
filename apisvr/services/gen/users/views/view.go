// Code generated by goa v3.14.1, DO NOT EDIT.
//
// users views
//
// Command:
// $ goa gen apisvr/design -o ./services

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// UserList is the viewed result type that is projected based on a view.
type UserList struct {
	// Type to project
	Projected *UserListView
	// View to render
	View string
}

// User is the viewed result type that is projected based on a view.
type User struct {
	// Type to project
	Projected *UserView
	// View to render
	View string
}

// UserListView is a type that runs validations on a projected type.
type UserListView struct {
	// Items
	Items UserListItemCollectionView
	// Total number of items
	Total *uint64
	// Offset
	Offset *uint64
}

// UserListItemCollectionView is a type that runs validations on a projected
// type.
type UserListItemCollectionView []*UserListItemView

// UserListItemView is a type that runs validations on a projected type.
type UserListItemView struct {
	// ID
	ID *uint64
	// Name
	Name *string
}

// UserView is a type that runs validations on a projected type.
type UserView struct {
	// ID
	ID *uint64
	// CreatedAt
	CreatedAt *string
	// UpdatedAt
	UpdatedAt *string
	// Name
	Name *string
}

var (
	// UserListMap is a map indexing the attribute names of UserList by view name.
	UserListMap = map[string][]string{
		"default": {
			"items",
			"total",
			"offset",
		},
	}
	// UserMap is a map indexing the attribute names of User by view name.
	UserMap = map[string][]string{
		"default": {
			"id",
			"created_at",
			"updated_at",
			"name",
		},
	}
	// UserListItemCollectionMap is a map indexing the attribute names of
	// UserListItemCollection by view name.
	UserListItemCollectionMap = map[string][]string{
		"default": {
			"id",
			"name",
		},
	}
	// UserListItemMap is a map indexing the attribute names of UserListItem by
	// view name.
	UserListItemMap = map[string][]string{
		"default": {
			"id",
			"name",
		},
	}
)

// ValidateUserList runs the validations defined on the viewed result type
// UserList.
func ValidateUserList(result *UserList) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateUserListView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateUser runs the validations defined on the viewed result type User.
func ValidateUser(result *User) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateUserView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateUserListView runs the validations defined on UserListView using the
// "default" view.
func ValidateUserListView(result *UserListView) (err error) {
	if result.Total == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total", "result"))
	}
	if result.Offset == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("offset", "result"))
	}
	if result.Items != nil {
		if err2 := ValidateUserListItemCollectionView(result.Items); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUserListItemCollectionView runs the validations defined on
// UserListItemCollectionView using the "default" view.
func ValidateUserListItemCollectionView(result UserListItemCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateUserListItemView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUserListItemView runs the validations defined on UserListItemView
// using the "default" view.
func ValidateUserListItemView(result *UserListItemView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	return
}

// ValidateUserView runs the validations defined on UserView using the
// "default" view.
func ValidateUserView(result *UserView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "result"))
	}
	if result.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.created_at", *result.CreatedAt, goa.FormatDateTime))
	}
	if result.UpdatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.updated_at", *result.UpdatedAt, goa.FormatDateTime))
	}
	return
}
